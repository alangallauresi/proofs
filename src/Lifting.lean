import Mathlib

-- ðŸŸ¢ **Binary Difference Sequence (BDS) Definition**
def BDS (n : â„•) : â„š :=
  match n with
  | 0     => 1
  | (n+1) => 2 * BDS n

-- ðŸŸ¢ **Theorem: BDS follows the closed form BDS(n) = 2^n**
theorem BDS_closed_form (n : â„•) : BDS n = 2 ^ n := by
  -- Use induction on n
  induction n with
  | zero =>
    simp only [BDS, pow_zero] -- Base case BDS(0) = 1, 2^0 = 1
  | succ n ih =>
    simp only [BDS] -- Unfold BDS (n+1) = 2 * BDS(n)
    rw [ih] -- Apply induction hypothesis BDS(n) = 2^n
    rw [pow_succ] -- Use 2^(n+1) = 2^n * 2
    ring_nf -- Normalize and finish

-- ðŸŸ¢ **Binary Search Tree (BST) Definition**
structure BST (Î± : Type) where
  val : Î±
  left : Option (BST Î±)
  right : Option (BST Î±)

-- ðŸŸ¢ **Generate a BST with rational values based on depth**
def generateBST : â„• â†’ BST â„š
| 0 => âŸ¨ 1, none, none âŸ©
| (n+1) =>
  let left := generateBST n
  let right := generateBST n
  âŸ¨ BDS (n + 1), some left, some right âŸ©

-- ðŸŸ¢ **Test Cases for BDS**
#reduce BDS 0 -- 1
#reduce BDS 1 -- 2
#reduce BDS 2 -- 4
#reduce BDS 3 -- 8
#reduce BDS 4 -- 16
#reduce BDS 5 -- 32
#reduce BDS 10 -- 1024

-- ðŸŸ¢ **Test Cases for BST**
#reduce generateBST 0 -- BST with one node, value 1
#reduce generateBST 1 -- BST with 3 nodes
#reduce generateBST 2 -- BST with 7 nodes
